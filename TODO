gcc -o affectation_sentinel affectation.c -I ../td1/set_sentinel ../td1/set_sentinel -DSENTINEL

mettre sentinel dans td3
gcc -o affectation_sentinel affectation.c -I ../td1/sentinel/ ../td1/set_sentinel.o -DSENTINEL
gcc -std=c99 -o affectation_sentinel affectation.c -I ../td1/sentinel ../td1/set_sentinel.o -DSENTINEL




POUR CHAQUE REALISATION

*modifier set.h, set empty retourne maintenant un pointeur
*   dans set sentinel c
    - inclure set.h au lieu de set_sentinel.h
    - recopier la definitieon de struct set pour que les structurels passent
    - modifier set__empty et set__free
    - mettre a jours les tests fonctionnels

    mettre a jour le Makefile -> telecharger la nouvelle version

    pour vacs
    tests fonctionnels doivent passer
    comparer les 2 makefiles et expliquer



    JUSQUA EXO 12


remplacer les int par des struct personne
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
  prototypes de set__ add find remove
  pb dans set find
  ordre ()
  sentinelle
  filter
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@posent des problemes


  

  SENTINEL set filter int (*filtre) (struct person const *) propriete propriété possése par le type void*

  comparer tous les champs pour les comparaisons (fonctions)


&&&& feuille 4 &&&&
  question 1

dans set_sentonel.c on pourrait ecrire

#ifdef INT
typedef int t;
#elifdefines STRUCT_PERS
typedef struct personne t;
ETC.....

pb : deguelasse, il faut recompiler a chaque fois
et on ne peut pas avoir dans le meme pb des ensemble de types différents.

polymorphisme
avec des pointeurs de type void*






struct set {
  void* s[SET__SIZE];
}
